{"version":3,"sources":["app.js"],"names":["angular","module","controller","InventoryController","$inject","tax","InventoryService","vm","newItem","sortType","sortReverse","items","getAllItems","add","item","addItem","itemPrice","discountPrice","price","discount","changeSort","sortField","factory","JSON","parse","localStorage","getItem","name","length","color","Number","isNaN","quantity","push","id","setItem","toJson"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('inventory', []);\n\n  \n\n}());\n\n(function() {\n  'use strict';\n\n  angular.module('inventory')\n    .controller('InventoryController', InventoryController);\n\n  InventoryController.$inject = ['InventoryService'];\n\n  let tax = 0.0575;\n\n  /**\n   * Creates InventoryController's constructor\n   * @param {Object} InventoryService's item object\n   */\n  function InventoryController(InventoryService) {\n    let vm = this;\n\n    vm.newItem = {};\n\n    vm.sortType = 'price';\n    vm.sortReverse = false;\n\n    vm.items = InventoryService.getAllItems();\n\n    vm.add = function add(item) {\n      InventoryService.addItem(item);\n      vm.newItem = {};\n    };\n\n    vm.tax = tax;\n\n    /**\n    * Gets price of items by subtracting item's discount from it's price\n    * and then multiplying it by the tax (1.0575)\n    * @param  {Object}   item  Takes in the controller's object\n    * @return {number}         The final price\n    */\n    vm.itemPrice = function itemPrice(item) {\n      let discountPrice = item.price - item.discount;\n      return discountPrice * (tax + 1);\n    };\n\n\n    /**\n     * Change the order of the list of items\n     * @param  {String} sortField String of the item\n     * @return {void}\n     */\n    vm.changeSort = function changeSort(sortField) {\n      vm.sortType = sortField;\n      vm.sortReverse = !vm.sortReverse;\n    };\n\n\n  }\n\n}());\n\n(function() {\n  'use strict';\n\n  angular.module('inventory')\n    .factory('InventoryService', InventoryService);\n\n    /**\n     * Creates a new Inventory Service\n     */\n    function InventoryService(){\n\n      let items = JSON.parse(localStorage.getItem('items')) || [];\n\n\n      /**\n      * Adds an item to the inventory\n      * @param  {String} name The item to add with a name, price, discount, color, and quantity\n      * @return {void}\n      */\n      function addItem(item) {\n\n        if(typeof(item) !== 'object') {\n          return;\n        }\n\n        if(typeof(item.name) !== 'string' || item.name.length < 1) {\n          return;\n        }\n\n        if(typeof(item.color) !== 'string'){\n          return;\n        }\n\n        item.price = Number(item.price);\n        if(Number.isNaN(item.price) || item.price < 0.01) {\n          return;\n        }\n\n        item.discount = Number(item.discount);\n        if(Number.isNaN(item.discount) || item.discount < 0.01) {\n          return;\n        }\n\n        item.quantity = Number(item.quantity);\n        if(Number.isNaN(item.quantity) || item.quantity < 0) {\n          return;\n        }\n\n        items.push({\n          id: 13,\n          name: item.name,\n          price: item.price,\n          discount: item.discount,\n          color: item.color,\n          quantity: item.quantity\n        });\n\n        localStorage.setItem('items', angular.toJson(items));\n\n      }\n\n      /**\n       * Gets the items in the array\n       * @return {Array}\n       */\n      function getAllItems() {\n        return items;\n      }\n\n      return {\n        addItem: addItem,\n        getAllItems: getAllItems\n      };\n\n    }\n\n\n\n\n}());\n\n//# sourceMappingURL=app.js.map"]}